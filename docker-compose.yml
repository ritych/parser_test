services:
  postgres:
    image: postgres:13.8
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
    env_file:
      - .env
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ./DockerVolumes/pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}" ]
      interval: 10s
      retries: 5
      timeout: 5s

  redis:
    image: redis:latest
    container_name: redis
    environment:
      REDIS_PORT: ${REDIS_PORT}
    env_file:
      - .env
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - ./DockerVolumes/redis:/var/lib/redis

  celery:
    build:
      context: .
    container_name: celery_worker
    command: bash -c "celery -A app.tasks.task:celery worker --loglevel=INFO"
    depends_on:
      - redis
      - postgres

  beat:
    build:
      context: .
    container_name: celery_beat
    command: bash -c "celery -A app.tasks.task:celery beat --loglevel=INFO"
    depends_on:
      - redis
      - postgres

  flower:
    build:
      context: .
    container_name: flower
    command: bash -c "celery -A app.tasks.task:celery flower"
    env_file:
      - .env
    ports:
      - "${FLOWER_PORT}:5555"
    depends_on:
      - redis
      - celery
      - postgres

  parser-service:
    build:
      context: ./
      dockerfile: Dockerfile
    env_file:
      - .env
    container_name: parser-service
    entrypoint: ./entrypoint.sh
    ports:
      - "${APP_PORT}:8000"
    depends_on:
      postgres:
        condition: service_healthy
